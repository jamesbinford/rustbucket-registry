# Generated by Django 5.2.1 on 2025-05-11 18:50

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='LogSink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_type', models.CharField(choices=[('Error', 'Error'), ('Warning', 'Warning'), ('Info', 'Info'), ('Debug', 'Debug')], help_text='Type of log', max_length=20)),
                ('size', models.CharField(help_text='Size of the log', max_length=20)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Maintenance', 'Maintenance')], default='Active', help_text='Current status of the logsink', max_length=20)),
                ('alert_level', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='low', help_text='Alert level of the logsink', max_length=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the logsink was created')),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now, help_text='When the logsink was last updated')),
            ],
            options={
                'verbose_name': 'Log Sink',
                'verbose_name_plural': 'Log Sinks',
                'ordering': ['-last_update'],
            },
        ),
        migrations.CreateModel(
            name='Rustbucket',
            fields=[
                ('id', models.CharField(editable=False, help_text='Unique identifier for the rustbucket', max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the rustbucket', max_length=255)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the rustbucket')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Maintenance', 'Maintenance')], default='Active', help_text='Current status of the rustbucket', max_length=20)),
                ('operating_system', models.CharField(help_text='Operating system of the rustbucket', max_length=255)),
                ('cpu_usage', models.CharField(blank=True, help_text='Current CPU usage percentage', max_length=10, null=True)),
                ('memory_usage', models.CharField(blank=True, help_text='Current memory usage percentage', max_length=10, null=True)),
                ('disk_space', models.CharField(blank=True, help_text='Available disk space', max_length=20, null=True)),
                ('uptime', models.CharField(blank=True, help_text='Uptime of the rustbucket', max_length=20, null=True)),
                ('connections', models.IntegerField(blank=True, help_text='Number of active connections', null=True)),
                ('api_key', models.UUIDField(default=uuid.uuid4, editable=False, help_text='API key for rustbucket authentication', unique=True)),
                ('registered_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the rustbucket was registered')),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now, help_text='When the rustbucket was last seen')),
                ('last_log_dump', models.DateTimeField(blank=True, help_text='When the rustbucket last sent logs', null=True)),
            ],
            options={
                'verbose_name': 'Rustbucket',
                'verbose_name_plural': 'Rustbuckets',
                'ordering': ['-last_seen'],
            },
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When the log entry was created')),
                ('message', models.TextField(help_text='The log message')),
                ('logsink', models.ForeignKey(help_text='The logsink this entry belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='rustbucketregistry.logsink')),
            ],
            options={
                'verbose_name': 'Log Entry',
                'verbose_name_plural': 'Log Entries',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('error', 'Error'), ('warning', 'Warning'), ('info', 'Info')], help_text='Type of alert', max_length=10)),
                ('message', models.CharField(help_text='Alert message', max_length=255)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the alert was created')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When the alert was resolved', null=True)),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether the alert has been resolved')),
                ('logsink', models.ForeignKey(help_text='The logsink this alert belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='rustbucketregistry.logsink')),
            ],
            options={
                'verbose_name': 'Alert',
                'verbose_name_plural': 'Alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='logsink',
            name='rustbucket',
            field=models.ForeignKey(help_text='The rustbucket this logsink belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='logsinks', to='rustbucketregistry.rustbucket'),
        ),
        migrations.CreateModel(
            name='HoneypotActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('scan', 'Scan'), ('exploit', 'Exploit'), ('bruteforce', 'Brute Force'), ('malware', 'Malware')], help_text='Type of activity', max_length=20)),
                ('source_ip', models.GenericIPAddressField(help_text='Source IP of the activity')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When the activity was detected')),
                ('details', models.TextField(help_text='Details of the activity')),
                ('rustbucket', models.ForeignKey(help_text='The rustbucket this activity was detected from', on_delete=django.db.models.deletion.CASCADE, related_name='honeypot_activities', to='rustbucketregistry.rustbucket')),
            ],
            options={
                'verbose_name': 'Honeypot Activity',
                'verbose_name_plural': 'Honeypot Activities',
                'ordering': ['-timestamp'],
            },
        ),
    ]
